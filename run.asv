
% like the double integrator, but on a 2D plain.
%{
Plan:
1. x0 = (0,0) and xf = (f,0)
2. for every f, construct a bunch of trajectories with obstacles and save
them
3. sort trajs by time, so we can take the first that works

Runtime:
1. transform coords so x0 = (0,0), xf = (f,0)
2. grab all the trajs for f
3. select traj with lowest cost that doesn't collide (keep in sorted
order)
4. perform a few steps of opt. on this to adjust.
5. transform coords back to world frame

TODO:
<X> reasonable init condits
<X> coordinate transformation from x0, xf
< > construct and save trajectories
< > sort by time
< > load trajs based on xf
< > check validity of traj with current obstacles
< > perform a bit of opt.
< > return commands!
%}
  
% Simple example of Direct Transcription trajectory optimization
% X = [x, y, vx, vy]';
clear;
close all;

% LIBRARY STRUCTURE
library = [];

% inputs
d = 5;
x0 = [0;0;0;0];
xf = [d;0;0;0];
r = .4;
obn = 2;
obbox = repmat([d, 4],obn,1); % box
oboff = repmat([, -2], obn,1); % offset

n_runs = 10;
for i = 1:n_runs
    obstacles = obbox .* rand(obn,2) + oboff;

    % solve
    [xtraj, utraj, tf] = gen_traj(x0,xf, obstacles, r);

    % show
    draw_traj(xtraj, obstacles, r);

    % save
    library = [library; {d, tf, xtraj, utraj}];
end

figure;
hold on;
for i = 1:n_runs
    draw_traj(library{i,3},[],0);
end

